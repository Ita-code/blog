(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{427:function(t,n,a){"use strict";a.r(n);var i=a(3),e=Object(i.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("在工作中常用的命令是我用'*'标记，大家可以ctrl+f搜索查看常用命令。\n此篇已经涵盖了大部分的git命令。")])]),t._v(" "),a("h2",{attrs:{id:"常用git命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用git命令"}},[t._v("#")]),t._v(" 常用GIT命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git config --global user.name "你的名字" 让你全部的Git仓库绑定你的名字\ngit config --global user.email "你的邮箱" 让你全部的Git仓库绑定你的邮箱\ngit init 初始化你的仓库\ngit add . 把工作区的文件全部提交到暂存区\ngit add ./<file>/ 把工作区的<file>文件提交到暂存区\ngit commit -m "xxx" 把暂存区的所有文件提交到仓库区，暂存区空空荡荡\ngit remote add origin https://github.com/name/name_cangku.git 把本地仓库与远程仓库连接起来\ngit push -u origin master 把仓库区的主分支master提交到远程仓库里\ngit push -u origin <其他分支> 把其他分支提交到远程仓库\ngit status查看当前仓库的状态\ngit diff 查看文件修改的具体内容\ngit log 显示从最近到最远的提交历史\ngit clone + 仓库地址下载克隆文件\ngit reset --hard + 版本号 回溯版本，版本号在commit的时候与master跟随在一起\ngit reflog 显示命令历史\ngit checkout -- <file> 撤销命令，用版本库里的文件替换掉工作区的文件。我觉得就像是Git世界的ctrl + z\ngit rm 删除版本库的文件\ngit branch 查看当前所有分支\ngit branch <分支名字> 创建分支\ngit checkout <分支名字> 切换到分支\ngit merge <分支名字> 合并分支\ngit branch -d <分支名字> 删除分支,有可能会删除失败，因为Git会保护没有被合并的分支\ngit branch -D + <分支名字> 强行删除，丢弃没被合并的分支\ngit log --graph 查看分支合并图\ngit merge --no-ff <分支名字> 合并分支的时候禁用Fast forward模式,因为这个模式会丢失分支历史信息\ngit stash 当有其他任务插进来时，把当前工作现场“存储”起来,以后恢复后继续工作\ngit stash list 查看你刚刚“存放”起来的工作去哪里了\ngit stash apply 恢复却不删除stash内容\ngit stash drop 删除stash内容\ngit stash pop 恢复的同时把stash内容也删了\ngit remote 查看远程库的信息，会显示origin，远程仓库默认名称为origin\ngit remote -v 显示更详细的信息\ngit pull 把最新的提交从远程仓库中抓取下来，在本地合并,和git push相反\ngit rebase 把分叉的提交历史“整理”成一条直线，看上去更直观\ngit tag 查看所有标签，可以知道历史版本的tag\ngit tag <name> 打标签，默认为HEAD。比如git tag v1.0\ngit tag <tagName> <版本号> 把版本号打上标签，版本号就是commit时，跟在旁边的一串字母数字\ngit show <tagName> 查看标签信息\ngit tag -a <tagName> -m "<说明>" 创建带说明的标签。 -a指定标签名，-m指定说明文字\ngit tag -d <tagName> 删除标签\ngit push origin <tagname> 推送某个标签到远程\ngit push origin --tags 一次性推送全部尚未推送到远程的本地标签\ngit push origin :refs/tags/<tagname> 删除远程标签<tagname>\ngit config --global color.ui true 让Git显示颜色，会让命令输出看起来更醒目\ngit add -f <file> 强制提交已忽略的的文件\ngit check-ignore -v <file> 检查为什么Git会忽略该文件\n\n')])])]),a("h2",{attrs:{id:"配置git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置git"}},[t._v("#")]),t._v(" 配置GIT")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('# 显示当前的Git配置\n* git config --list\n\n# 设置提交代码时的用户信息\n* git config [--global] user.name "[name]"\n* git config [--global] user.email "[email address]"\n')])])]),a("h2",{attrs:{id:"仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#仓库"}},[t._v("#")]),t._v(" 仓库")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 在当前目录新建一个Git代码库\n* git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n* git clone [url]\n")])])]),a("h2",{attrs:{id:"增加-删除文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增加-删除文件"}},[t._v("#")]),t._v(" 增加/删除文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n* git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n")])])]),a("h2",{attrs:{id:"代码提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码提交"}},[t._v("#")]),t._v(" 代码提交")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('# 提交暂存区到仓库区\n* git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n\n# git commit 忽略eslint 校验\n$ git commit --no-verify -m "commit"\n')])])]),a("h2",{attrs:{id:"撤销"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[t._v("#")]),t._v(" 撤销")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 恢复暂存区的指定文件到工作区\n* git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n* git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n* git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支  撤销提交\n$ git revert [commit]\n\n暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n")])])]),a("h2",{attrs:{id:"查看信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看信息"}},[t._v("#")]),t._v(" 查看信息")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('# 显示有变更的文件\n* git status\n\n# 显示当前分支的版本历史\n* git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n')])])]),a("h2",{attrs:{id:"远程同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程同步"}},[t._v("#")]),t._v(" 远程同步")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n* git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n* git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n")])])]),a("h2",{attrs:{id:"标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[t._v("#")]),t._v(" 标签")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n")])])]),a("h2",{attrs:{id:"分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n")])])]),a("h2",{attrs:{id:"忽略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#忽略"}},[t._v("#")]),t._v(" 忽略")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 执行命令将文件加入不提交队列\n\ngit update-index --assume-unchanged 你的文件路径\n\n# 执行命令将文件取消加入不提交队列\n\ngit update-index --no-assume-unchanged 你的文件路径\n\n# 更新.gitignore的忽略\n\ngit rm -r --cached .\n\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);