(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{577:function(t,n,s){"use strict";s.r(n);var a=s(8),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h5",{attrs:{id:"java-helloworld的执行过程以及原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-helloworld的执行过程以及原理"}},[t._v("#")]),t._v(" java HelloWorld的执行过程以及原理")]),t._v(" "),s("ul",[s("li",[t._v("第一步：启动Java虚拟机（JVM)")]),t._v(" "),s("li",[t._v("第二步：虚拟机启动后，虚拟机会启动 "),s("strong",[t._v("类加载器 classloader")]),t._v(" "),s("ul",[s("li",[t._v('类加载器的作用：加载类。本质上就是类加载器负责去硬盘上找"类"对应的"字节码"文件')]),t._v(" "),s("li",[t._v("例如 java helloworld 那么类加载文件就会去找helloworld.class文件。")])])]),t._v(" "),s("li",[t._v("第三步：类加载器如果在硬盘上找不到对应的字节码文件，会报错，无法加载主类\n"),s("ul",[s("li",[t._v("类加载器如果找到对应的字节码文件，类加载器会将字节码文件装载到JVM当中，JVM启动”解释器“将字节码解释为”101010000...“这种二进制码，操作系统执行二进制文件和硬件交互。")])])])]),t._v(" "),s("h5",{attrs:{id:"java数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java数据类型"}},[t._v("#")]),t._v(" Java数据类型")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("基本数据类型   "),s("strong",[t._v("8种")])]),t._v(" "),s("ul",[s("li",[t._v("整数型  byte(字节型)、short(短整型)、int(整型)、long (长整型)")]),t._v(" "),s("li",[t._v("浮点型  double(双精度)、float(单精度)")]),t._v(" "),s("li",[t._v("布尔型  boolean")]),t._v(" "),s("li",[t._v("字符型  char")])])]),t._v(" "),s("li",[s("p",[t._v("引用数据类型:Java中除了基本数据类型之外都是引用数据类型。")]),t._v(" "),s("ul",[s("li",[t._v("String字符串不属于基本数据类型")])])]),t._v(" "),s("li",[s("p",[t._v("计算机存储单位")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("计算机只能识别二进制。（10011100...)")])]),t._v(" "),s("li",[s("p",[t._v("1字节=8bit（8比特）--\x3e 1byte=8bit")])]),t._v(" "),s("li",[s("p",[t._v("1bit就是一个1或0")])]),t._v(" "),s("li",[s("p",[t._v("1KB=1024byte、1MB=1024KB、1GB=1024MB、1TB=1024GB")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("byte b=2")]),t._v("：在计算机中表示为 00000010")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("short s=2")]),t._v("：在计算机中表示为 00000000 00000010")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("int i=2")]),t._v("：在计算机中表示为00000000 00000000 00000010")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("byte--\x3e1字节（-128~127） short--\x3e2字节(-32768~32767) int--\x3e4字节（-2147483648~2147483647） long--\x3e8字节")])])]),t._v(" "),s("li",[s("p",[t._v("float--\x3e4字节 double--\x3e8字节")])]),t._v(" "),s("li",[s("p",[t._v("boolean--\x3e1字节")])]),t._v(" "),s("li",[s("p",[t._v("char--\x3e2字节(0~65535)可以表示65536个不同的数字，和short相同")])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    int a=10;\n    System.out.println(a);//默认十进制  10\n    int b=010;\n    System.out.println(b);//八进制  8\n    int c=0x10;\n    System.out.println(c);//十六进制 16\n    int d=0b10;\n    System.out.println(d);//二进制 2\n")])])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ASCII（'a'是97  'A'是65 '0'是48）")])])]),t._v(" "),s("li",[s("p",[t._v("计算机原码反码补码")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("计算机存储的是二进制补码形式")])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("int i = 1;//正整数的原码反码补码相同\n//对应的二进制原码：00000000 00000000 00000000 00000001\n//对应的二进制反码：00000000 00000000 00000000 00000001\n//对应的二进制补码：00000000 00000000 00000000 00000001\n\nbyte b = 1;\n//对应的二进制原码(第一位是符号位：负数的符号位为1)：10000001\n//对应的二进制反码(符号位不变，其他位取反)：10000001 ==》 11111110\n//对应的二进制补码(反码+1)：11111110 ==》 11111111\n")])])])])])]),t._v(" "),s("li",[s("p",[t._v("数据类型混合运算的时候取"),s("strong",[t._v("最大类型的字节")]),t._v("在继续做运算")])])]),t._v(" "),s("h5",{attrs:{id:"逻辑判断符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑判断符"}},[t._v("#")]),t._v(" 逻辑判断符")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    //&与&&的区别\n    int x = 10;\n    int y = 11;\n    System.out.println(x > y & x > y++);//false\n    System.out.println(y);//12\n\n    int n = 10;\n    int m = 11;\n    System.out.println(n > m && n > m++);//false\n    System.out.println(m);//11\n")])])]),s("h5",{attrs:{id:"java方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java方法"}},[t._v("#")]),t._v(" Java方法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("普通方法")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class test02 {\n    public static void main(String[] args) {\n        Print_Str("打印一个方法体里面的内容");//打印一个方法体里面的内容\n    }\n    //[修饰符列表] 返回值类型 方法名称 方法参数\n    //[]修饰符参数为可选参数\n    //返回值类型包括基本数据类型和引用数据类型\n    public static void Print_Str(String st) {\n        //void表示空类型,没有返回值类型\n        System.out.println(st);\n        //方法体\n\n        if(big(4,5)){\n            System.out.print("是的大于");\n        }else {\n            System.out.print("不是小于");//不是小于\n        }\n    }\n    public static Boolean big(int x,int y){\n        if(x>y){\n            return true;\n        }else {\n            return false;\n        }\n    }\n}\n')])])])])])]),t._v(" "),s("li",[s("p",[t._v("方法的执行顺序")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("方法体中的代码遵循自上而下的顺序依次执行")])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class test03 {\n    public static void main(String[] args) {\n        print("main执行");\n        m1();\n        print("main结束");\n    }\n\n    public static void m1() {\n        print("m1执行");\n        m2();\n        print("m1结束");\n    }\n\n    public static void m2() {\n        print("m2执行");\n        myClass.m3();\n        print("m2结束");\n    }\n\n    public static void print(String str) {\n        System.out.println(str);\n    }\n}\n\nclass myClass {\n    public static void m3() {\n        test03.print("m2执行");\n        System.out.println("这是m3方法！");\n        test03.print("m2结束");\n    }\n}\n\n//打印输入结果\n\nmain执行\nm1执行\nm2执行\nm2执行\n这是m3方法！\nm2结束\nm2结束\nm1结束\nmain结束\n')])])])]),t._v(" "),s("li",[s("p",[t._v("break和return的区别")]),t._v(" "),s("ul",[s("li",[t._v("break控制的是循环；终止循环")]),t._v(" "),s("li",[t._v("return控制的是方法；终止当前方法")])])])])])]),t._v(" "),s("h5",{attrs:{id:"java方法重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java方法重载"}},[t._v("#")]),t._v(" Java方法重载")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("条件1:在同一个类当中")])]),t._v(" "),s("li",[s("p",[t._v("条件2:方法名相同")])]),t._v(" "),s("li",[s("p",[t._v("条件3:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("参数列表不同")]),t._v(" "),s("ul",[s("li",[t._v("参数个数不同")]),t._v(" "),s("li",[t._v("参数类型不同")]),t._v(" "),s("li",[t._v("参数顺序不同")])])]),t._v(" "),s("li",[s("p",[t._v("注意:")]),t._v(" "),s("ul",[s("li",[t._v("和返回类型无关")]),t._v(" "),s("li",[t._v("和修饰符无关")])])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class test06 {\n    public static void main(String[] args) {\n        System.out.println(m1(10, 1));//11\n        double a = m1(10.8, 1.8);\n        System.out.println(String.format("%.2f", a));//12.60\n    }\n\n    public static int m1(int x, int y) {\n        return x + y;\n    }\n\n    public static double m1(double x, double y) {\n        return x + y;\n    }\n}\n\n//重载  println方法\nSystem.out.println(1.8d);\nSystem.out.println(1977777777777777777L);\nSystem.out.println(456);\nSystem.out.println(true);\n')])])])])])])]),t._v(" "),s("h5",{attrs:{id:"java递归"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java递归"}},[t._v("#")]),t._v(" Java递归")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("public class RecursionTest02 {\n    public static void main(String[] args) {\n        int result=getSum(3);\n        System.out.println(result);\n    }\n    public static int getSum(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return n + getSum(--n);\n    }\n}\n")])])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210911220127437.png",alt:"image-20210911220127437"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210911220552370.png",alt:"image-20210911220552370"}})]),t._v(" "),s("h5",{attrs:{id:"面向对象和面向过程的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象和面向过程的区别"}},[t._v("#")]),t._v(" 面向对象和面向过程的区别")]),t._v(" "),s("ul",[s("li",[t._v("从语言方面\n"),s("ul",[s("li",[t._v("对于c语言来说，是完全面向过程的。")]),t._v(" "),s("li",[t._v("对于c++语言来说，是一半面向过程，一半是面向对象（c++半面向对象）")]),t._v(" "),s("li",[t._v("对于Java和c#语言来说，是完全面向对象的。")])])]),t._v(" "),s("li",[t._v("面向过程开发\n"),s("ul",[s("li",[t._v("面向过程的开发方式主要特点是：\n"),s("ul",[s("li",[t._v("注重步骤，注重的是实现这个功能的步骤")]),t._v(" "),s("li",[t._v("第一步做什么")]),t._v(" "),s("li",[t._v("第二步做什么")]),t._v(" "),s("li",[t._v("...")]),t._v(" "),s("li",[t._v("另外面向过程也注重实现功能的因果关系")]),t._v(" "),s("li",[t._v("因为A所以B")]),t._v(" "),s("li",[t._v("因为B所以C")]),t._v(" "),s("li",[t._v("...")]),t._v(" "),s("li",[t._v("面向过程中没有对象的概念。只是实现这个功能的步骤以及因果关系。")])])]),t._v(" "),s("li",[t._v("面向过程的优缺点\n"),s("ul",[s("li",[t._v("缺点：耦合度高拓展力差\n"),s("ul",[s("li",[t._v("面向过程最主要的是每一步与每一步的因果关系，其中A步骤因果关系到B步骤，A和B联合起来形成一个子模块，子模块和子模块之间又因为因果关系结合在一起，假设其中任何一个因果关系出现问题（错误），此时整个系统的运转都会出现问题。（代码和代码之间的耦合度太高，拓展性太差）\n"),s("ul",[s("li",[t._v("耦合度高导致拓展力差（集成显卡：计算机显卡不是独立显卡，是集成在主板上）")]),t._v(" "),s("li",[t._v("耦合度低导致拓展力强（灯泡和灯口关系，螺栓和螺母关系）")]),t._v(" "),s("li",[t._v("集成显卡和"),s("em",[t._v("独立显卡")]),t._v("=》面向过程和"),s("em",[t._v("面向对象")])])])])])]),t._v(" "),s("li",[t._v("优点：快速开发\n"),s("ul",[s("li",[t._v("对于小型项目（功能）,采用面向过程的方式进行开发，效率较高。不需要前期进行对象的提取，模型的建立，采用面向过程方式可以直接开始干活。一上来直接写代码，编写因果关系。从而实现功能。")])])])])])])]),t._v(" "),s("li",[t._v("面向对象开发\n"),s("ul",[s("li",[t._v("面向对象的开发方式主要特点是：\n"),s("ul",[s("li",[t._v("更符合人类的思维方式。（面向对象成为主流的原因）")]),t._v(" "),s("li",[t._v("人类就是以"),s("code",[t._v("对象")]),t._v("的方式去认识世界的。")]),t._v(" "),s("li",[t._v("面向对象就是将现实世界分割成不同的单元，然后每一个单元都实现成对象，然后给一个环境驱动一下。让各个对象之间协作起来形成一个系统。")]),t._v(" "),s("li",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210912101442515.png",alt:"image-20210912101442515"}})])])]),t._v(" "),s("li",[t._v("特点：耦合度低，拓展力强。\n"),s("ul",[s("li",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210912101639622.png",alt:"image-20210912101639622"}})])])]),t._v(" "),s("li",[t._v("面向过程主要关注的是：实现步骤以及整个过程。")]),t._v(" "),s("li",[t._v("面向对象主要关注的是：对象A，对象B，对象C，然后对象ABC组合，或者CBA组合...")])])]),t._v(" "),s("li",[t._v("当我们采用面向对象的方式贯穿整个系统的话，涉及到的三个术语：\n"),s("ul",[s("li",[t._v("OOA:面向对象分析")]),t._v(" "),s("li",[t._v("OOD:面向对象设计")]),t._v(" "),s("li",[t._v("OOP:面向对象编程")]),t._v(" "),s("li",[t._v("实现一个软件的过程：\n"),s("ul",[s("li",[t._v("分析（A）--\x3e设计（D）--\x3e编程（p）")])])])])]),t._v(" "),s("li",[t._v("类和对象\n"),s("ul",[s("li",[t._v("类：是一个抽象的概念，不存在的，人类大脑思考总结一个模板（这个模板描述了共同特征）,对象特征的总结\n"),s("ul",[s("li",[t._v("具有共同特征，抽象出来的东西，就是一个类")])])]),t._v(" "),s("li",[t._v("对象：实际存在的个体（人是一个类，姚明是一个对象...)")]),t._v(" "),s("li",[t._v("实例：对象还有一个名字叫做实例  Stu s=new Stu(),s为实例")]),t._v(" "),s("li",[t._v("实例化：通过类这个模板创建对象的过程，叫做：实例化")]),t._v(" "),s("li",[t._v("抽象：多个对象具有共同特征，进行思考总结抽取共同特征的过程")]),t._v(" "),s("li",[t._v("类 -- 【实例化】--\x3e 对象（实例)")]),t._v(" "),s("li",[t._v("对象 -- 【抽象】--\x3e 类")]),t._v(" "),s("li",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210912104112097.png",alt:"image-20210912104112097"}})]),t._v(" "),s("li",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210912104204744.png",alt:"image-20210912104204744"}})]),t._v(" "),s("li",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210912112455941.png",alt:"image-20210912112455941"}})])])])]),t._v(" "),s("h5",{attrs:{id:"java工程师与现实世界的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java工程师与现实世界的关系"}},[t._v("#")]),t._v(" Java工程师与现实世界的关系")]),t._v(" "),s("ul",[s("li",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210912114657300.png",alt:"image-20210912114657300"}})])]),t._v(" "),s("h5",{attrs:{id:"创建对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建对象"}},[t._v("#")]),t._v(" 创建对象")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class test07 {\n    public static void main(String[] args) {\n        Student s1=new Student();\n        s1.name="张三";\n        System.out.println(s1.name);\n        System.out.println("-------------------");\n        Student s2=new Student();\n        s2.name="李四";\n        System.out.println(s2.name);\n    }\n}\nclass Student {\n    //学生名字\n    String name;\n    //学号\n    int number;\n    //性别\n    boolean sex;\n    //地址\n    String address;\n}\n')])])])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210912141118385.png",alt:"image-20210912141118385"}})])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210912165115840.png",alt:"image-20210912165115840"}})])]),t._v(" "),s("li",[s("p",[t._v("引用和对象区分")]),t._v(" "),s("ul",[s("li",[t._v("引用是存储对象内存地址的一个变量。")]),t._v(" "),s("li",[t._v("对象是堆内存里面new出来的。")])])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('package com.cobj.test01;\n\npublic class Addres {\n    //城市\n    String city;\n    //街道\n    String street;\n    //邮编\n    int zipcode;\n}\npackage com.cobj.test01;\n\npublic class User {\n    int id;//成员变量，实例变量（对象变量）\n    String name;\n    Addres addres;\n}\npackage com.cobj.test01;\n//第一步：类加载\npublic class Test {\n    //第二步：test调用main方法（方法调用要压栈）\n    //String name;   成员变量\n    public static void main(String[] args){\n        User u1=new User();\n        u1.addres=new Addres();\n        u1.addres.street="瑶湖区";\n        u1.addres.city="南昌";\n        u1.addres.zipcode=331200;\n        u1.name="张三";\n        System.out.println(u1.name+\',\'+u1.addres.street+\',\'+u1.addres.zipcode);\n    }\n}\n')])])])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210912172736452.png",alt:"image-20210912172736452"}})])])]),t._v(" "),s("h5",{attrs:{id:"对象回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象回收"}},[t._v("#")]),t._v(" 对象回收")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("垃圾回收器："),s("strong",[s("code",[t._v("GC")])])]),t._v(" "),s("ul",[s("li",[t._v("在Java语言中,垃圾回收器主要针对的是**"),s("code",[t._v("堆内存")]),t._v("**")]),t._v(" "),s("li",[t._v("当一个Java对象没有任何引用指向该对象的时候")]),t._v(" "),s("li",[t._v("GC会考虑将该垃圾数据释放回收掉")])])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210912181838305.png",alt:"image-20210912181838305"}})])]),t._v(" "),s("li",[s("p",[t._v("空指针异常（NullPointerException）")]),t._v(" "),s("ul",[s("li",[t._v("**"),s("code",[t._v("空引用")]),t._v("**访问实例【对象相关】相关的数据时，都会出现空指针异常。")])])])]),t._v(" "),s("h5",{attrs:{id:"方法调用参数传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法调用参数传递"}},[t._v("#")]),t._v(" 方法调用参数传递")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Java中关于方法调用时参数传递实际只有一个规则：")]),t._v(" "),s("ul",[s("li",[t._v("在参数传递的时候，将变量中保存的那个"),s("code",[t._v("值")]),t._v("复制一份过去")])])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class Test01 {\n    public static void main(String[]args){\n        int i=10;\n        add(i);\n        System.out.println("main=>"+i);//10\n    }\n    public static void add(int i){\n        i++;\n        System.out.println("add=>"+i);//11\n    }\n}\n//基于对象传值\npublic class Test {\n    public static void main(String[] args) {\n        Persion p = new Persion();\n        p.age = 10;\n        add(p);\n        System.out.println("main=>" + p.age);//11\n    }\n\n    public static void add(Persion p) {\n        p.age++;\n        System.out.println("add=>" + p.age);//11\n    }\n\n}\n\nclass Persion {\n    int age;\n}\n')])])])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210912204619980.png",alt:"image-20210912204619980"}})])])]),t._v(" "),s("h5",{attrs:{id:"构造方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[t._v("#")]),t._v(" 构造方法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("什么是构造方法，有什么用？")]),t._v(" "),s("ul",[s("li",[t._v("构造方法是一个比较特殊的方法，"),s("strong",[t._v("通过构造方法可以完成对象的创建，以及实例变量的初始化")]),t._v("。换句话说：构造方法是用来创建对象，并且同时给对象的属性赋值。（注意：实例变量没有手动赋值的时候，系统会赋默认值")]),t._v(" "),s("li",[t._v("重点：当一个类没有提供任何构造方法，系统会默认提供一个无参数的构造方法。（而这个构造方法被称为缺省构造器）")])])]),t._v(" "),s("li",[s("p",[t._v("调用构造方法怎么调用")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("使用new运算符来调用构造方法")])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class Test {\n    public static void main(String [] args){\n        Student st=new Student(19,"张三","REP");\n        System.out.println("年龄"+st.age);//年龄19\n    }\n}\n\npublic class Student {\n    String name;\n    int Number;\n    int age;\n    String hb;\n    public Student(int age,String name,String hb) {//构造方法\n        this.name=name;\n        this.age=age;\n        this.hb=hb;\n        System.out.println("我是"+this.name);//张三\n    }\n}\n')])])])])])]),t._v(" "),s("li",[s("p",[t._v("构造方法的语法结构")]),t._v(" "),s("ul",[s("li",[t._v("【修饰符列表】构造方法名（形式参数列表）{  构造方法体；  }")]),t._v(" "),s("li",[t._v("构造方法名和类名必须一致")])])]),t._v(" "),s("li",[s("p",[t._v("普通方法的语法结构")]),t._v(" "),s("ul",[s("li",[t._v("【修饰符列表】返回值类型  方法名（形式参数列表）{  方法体； }")])])]),t._v(" "),s("li",[s("p",[t._v("实例变量没有手动赋值的时候，实际上系统会默认赋值")]),t._v(" "),s("ul",[s("li",[t._v("赋值操作在什么时间进行\n"),s("ul",[s("li",[t._v("实例变量是在构造方法执行的过程中完成初始化赋值")]),t._v(" "),s("li",[t._v("错误❌不是在类加载的时候给实例变量赋值")])])])])])]),t._v(" "),s("h5",{attrs:{id:"封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("面向对象的首要特征：封装 。什么是封装？有什么用？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("现实生活中有很多现实的例子都是封装的，")])]),t._v(" "),s("li",[s("p",[t._v("例如：手机，电视机，笔记本电脑，照相机，这些都是外部有一个坚硬的壳儿。封装起来，保护内部的部件。保证内部的部件是安全的。另外封装了之后，对于我们使用者来说，我们是看不见内部的复杂结构的，我们也不需要关心内部有多么复杂，我们只需要操作外部壳儿上的几个按钮就可以完成操作。")])]),t._v(" "),s("li",[s("p",[t._v("封装的作用有两个：")]),t._v(" "),s("ul",[s("li",[t._v("第一个作用：保证内部结构的安全。")]),t._v(" "),s("li",[t._v("第二个作用：屏蔽复杂，暴露简单。")])])]),t._v(" "),s("li",[s("p",[t._v("代码级别上的作用")]),t._v(" "),s("ul",[s("li",[t._v("一个类体当中的数据，假设封装之后，对于代码的调用人员来说，不需要关心代码的复杂实现，只需要通过一个简单的入口就可以访问了。另外，类体中安全级别较高的数据封装起来，外部人员不能随意访问，来保证数据的安全性。")])])]),t._v(" "),s("li",[s("p",[t._v("怎么进行封装，代码怎么实现？\n第一步：属性私有化（使用private关键字进行修饰。）\n第二步：对外提供简单的操作入口。")])])])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class Student {\n    private String name;\n    private int Number;\n    private int age;\n    private String hb;\n\n    public Student(int age, String name, String hb) {\n        this.name = name;\n        this.age = age;\n        this.hb = hb;\n        System.out.println("我是" + this.name);//张三\n    }\n\n    public void setAge(int age) {\n        if (age <= 0 || age >= 150) {\n            System.out.println("年龄设置不合法");\n            return;\n        }\n        this.age = age;\n\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n\npublic class Test {\n    public static void main(String [] args){\n        Student st=new Student(19,"张三","REP");\n        System.out.println("年龄"+st.getAge());//年龄19\n        st.setAge(-18);\n        System.out.println("年龄"+st.getAge());//年龄19\n    }\n}\n')])])])])]),t._v(" "),s("h5",{attrs:{id:"静态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态"}},[t._v("#")]),t._v(" 静态")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class VarTest{\n    /*\n    *   成员变量：\n    *       实例变量\n    *       静态变量\n    * */\n\n    //以下实例的，都是对象相关的，访问时采用“引用.”的方式访问。需要先new对象\n    //实例相关的，必须先有对象，才能访问，可能会出现空指针异常的情况。\n    int i;//成员变量中的实例变量\n    public void m2(){}//实例方法\n\n    //以下静态的，都是类相关的，访问时采用“类名.”的方式访问。不需要new对象\n    //不需要对象的参与即可访问。没有空指针异常的发生。\n    //静态变量在类加载的时候初始化，不需要new对象，静态变量的空间就开出来了。\n    //静态变量存储在方法区\n    static int n;//成员变量中的静态变量\n    public static void m1(){}//静态方法\n}\n")])])])]),t._v(" "),s("li",[s("p",[t._v("静态变量")]),t._v(" "),s("ul",[s("li",[t._v("如果这个类型的所有对象的某个属性都是一样的，不建议定义为实例变量，浪费内存空间。建议定义为类级别特征。定义为静态变量")])])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210913123448674.png",alt:"image-20210913123448674"}})])])]),t._v(" "),s("h5",{attrs:{id:"代码执行顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码执行顺序"}},[t._v("#")]),t._v(" 代码执行顺序")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class Test {\n    //代码执行顺序\n    static {\n        System.out.println("A");\n    }\n\n    public static void main(String[] args) {\n        System.out.println("C");\n        new Test();\n        System.out.println("F");\n        //ABCDEF\n    }\n\n    public Test() {\n        System.out.println("E");\n    }\n\n    {\n        System.out.println("D");\n    }\n\n    static {\n        System.out.println("B");\n    }\n}\n')])])])])]),t._v(" "),s("h5",{attrs:{id:"this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" This")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("this是一个关键字")])]),t._v(" "),s("li",[s("p",[t._v("一个对象一个this")]),t._v(" "),s("ul",[s("li",[t._v("this是一个变量，是一个引用。this保存当前对象的内存地址，指向自身。所以严格意义上来说，this代表的就是"),s("code",[t._v("当前对象")]),t._v("，this存储在堆内存当中对象的全部。")]),t._v(" "),s("li",[t._v("this不能使用在静态方法中。")])])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('package com.This;\n\npublic class Shop {\n    String name;\n    public Shop(String name){\n        this.name=name;\n    }\n    public void Look(){\n        System.out.println(this);\n        System.out.println(this.name+"正在购物！");\n    }\n}\n\npackage com.This;\n\npublic class Test {\n    public static void main(String[] args) {\n        Shop s=new Shop("张三");\n        System.out.println(s);\n        s.Look();\n        //com.This.Shop@1b6d3586\n        //com.This.Shop@1b6d3586\n        //张三正在购物！\n        Shop s1=new Shop("李四");\n        System.out.println(s1);\n        s1.Look();\n        //com.This.Shop@4554617c\n        //com.This.Shop@4554617c\n        //李四正在购物！\n    }\n}\n')])])])]),t._v(" "),s("li",[s("p",[t._v("this()")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("public Date(){\n    //this.year=1970;\n    //this.month=1;\n    //this.day=1;\n    this(1970,1,1);//更优\n}\n\npublic Date(int year, int month, int day) {\n    this.year = year;\n    this.month = month;\n    this.day = day;\n}\n")])])])])])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210913210947832.png",alt:"image-20210913210947832"}})])])]),t._v(" "),s("h5",{attrs:{id:"变量内存图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量内存图"}},[t._v("#")]),t._v(" 变量内存图")]),t._v(" "),s("ul",[s("li",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20210913223444841.png",alt:"image-20210913223444841"}})])]),t._v(" "),s("h5",{attrs:{id:"总结-实例、静态、构造"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结-实例、静态、构造"}},[t._v("#")]),t._v(" 总结（实例、静态、构造）")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sutdent")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//类")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Student类开始加载"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//类加载机制中：在程序执行之前，凡是需要加载的类全部加载到JVM当中。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//先完成加载才会执行main方法")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//局部变量")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stu")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stu")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张😀"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021001")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("study")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stu")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Stu类开始加载"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n     类体{\n        实例变量\n        实例方法\n\n        静态变量\n        静态方法\n\n        构造方法\n\n        静态代码语句块\n        实例代码语句块\n\n        方法(){\n            局部变量\n            int i =100\n        }\n     }\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实例变量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" idCard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实例变量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" job "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"学生"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//静态变量")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//构造方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stu")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"未知学生名字"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00001")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//this直接调用构造方法赋默认值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stu")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" idCard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("idCard "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" idCard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实例方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//静态方法的调用使用 “引用”.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("study")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//私有的是可以在本类访问，其他类中需要使用get取值set赋值")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//System.out.println(this.name+"正在学习！");')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//System.out.println(name+"正在学习！");')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//System.out.println(this.getName()+"正在学习！");')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"正在学习！"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"正在吃饭！"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stu")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("m1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//静态方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//静态方法的调用使用 “类名”.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("m1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"执行了m1静态方法！"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stu")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("m2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("m2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"m2方法访问静态变量Job:"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" job"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//getter和setter方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIdCard")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" idCard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setIdCard")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" idCard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("idCard "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" idCard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),s("h5",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("继承的相关特性")]),t._v(" "),s("ol",[s("li",[t._v("B类继承A类，则称A类为"),s("strong",[t._v("超类(superclass)、父类、基类")]),t._v("，B类则称为"),s("strong",[t._v("子类(subclass)、派生类、扩展类")]),t._v("。\nclass A{}\nclass B extends A{}\n我们平时聊天说的比较多的是：父类和子类。\nsuperclass 父类\nsubclass 子类")]),t._v(" "),s("li",[t._v("java 中的继承只支持单继承，不支持多继承，C++中支持多继承，这也是 java 体现简单性的一点，换句话说，java 中不允许这样写代码：\n"),s("code",[t._v("class B extends A,C{ } 这是错误的。")])]),t._v(" "),s("li",[t._v("虽然 java 中不支持多继承，但有的时候会产生间接继承的效果，例如：class C extends B，class B extends A，也就是说，C 直接继承 B，其实 C 还间接继承 A。")]),t._v(" "),s("li",[t._v("java 中规定，子类继承父类，除构造方法不能继承之外，剩下都可以继承。但是私有的属性无法在子类中直接访问。"),s("strong",[t._v("父类中private修饰的不能在子类中直接访问。可以通过间接的手段来访问（getter和setter访问、赋值）")]),t._v("。")]),t._v(" "),s("li",[t._v("java 中的类没有显示的继承任何类，则默认继承 Object类，Object类是 java 语言提供的根类（老祖宗类），也就是说，一个对象与生俱来就有 Object类型中所有的特征。")]),t._v(" "),s("li",[t._v("继承也存在一些"),s("strong",[t._v("缺点")]),t._v("，例如：CreditAccount 类继承 Account 类会导致它们之间的耦合度非常高，Account 类发生改变之后会马上影响到 CreditAccount 类")])]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InheriTest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小狗"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小猫"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"正在吃饭！"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])])]),t._v(" "),s("h5",{attrs:{id:"system-out-println"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#system-out-println"}},[t._v("#")]),t._v(" System.out.println")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" stu "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        stu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张三"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("study")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello word!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("study")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"正在学习"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),s("h5",{attrs:{id:"方法覆盖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法覆盖"}},[t._v("#")]),t._v(" 方法覆盖")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("条件一：两个类必须要有继承关系。")])]),t._v(" "),s("li",[s("p",[t._v("条件二：重写之后的方法和之前的方法具有：")]),t._v(" "),s("ul",[s("li",[t._v("相同的返回值类型")]),t._v(" "),s("li",[t._v("相同的方法名")]),t._v(" "),s("li",[t._v("相同的形式参数列表")])])]),t._v(" "),s("li",[s("p",[t._v("条件三：访问权限不能更低，可以更高（protected==>public）")])]),t._v(" "),s("li",[s("p",[t._v("条件四：重写之后的方法不能比之前的方法抛出更多的异常，可以更少。")])]),t._v(" "),s("li",[s("p",[t._v("注意：")]),t._v(" "),s("ul",[s("li",[t._v("方法覆盖只是针对于方法，和属性无关")]),t._v(" "),s("li",[t._v("私有方法无法覆盖")]),t._v(" "),s("li",[t._v("构造方法不能被继承，所以构造方法不能被覆盖")]),t._v(" "),s("li",[t._v("方法覆盖针对的是"),s("code",[t._v("实例方法")]),t._v("，"),s("code",[t._v("静态方法")]),t._v("覆盖没有意义")])])]),t._v(" "),s("li",[s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小花狗"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("move")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小懒猫"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("move")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("move")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"正在移动！"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("move")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"正在奔跑！"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//public void move() {")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//    System.out.println(this.name+"正在路上爬！");')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),s("h5",{attrs:{id:"多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("父类型引用指向子类型对象")])]),t._v(" "),s("li",[s("p",[t._v("包括编译阶段和运行阶段")]),t._v(" "),s("ul",[s("li",[t._v("编译阶段：绑定父类的方法\n"),s("ul",[s("li",[t._v("编译阶段编译器只知道d的类型是Animal，所以编译器在检查语法的时候，会去Animal.class字节码中找move（）方法。进行静态绑定（前提Animal中有move方法）")])])]),t._v(" "),s("li",[t._v("运行阶段：动态绑定子类型对象的方法\n"),s("ul",[s("li",[t._v("运行阶段的时候，实际上在堆内存中创建的Java对象是Dog对象，所以move的时候，真正参与move的对象是Dog对象。动态执行Dog对象的move()方法(动态绑定)")])])]),t._v(" "),s("li",[t._v("多种形态 ，多种状态，编译和运行有两个不同的状态")])])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class Animal {\n    String name;\n\n    public void move() {\n        System.out.println(this.name + "在移动！");\n    }\n}\npublic class Cat extends Animal {\n    public Cat(String name) {\n        this.name = name; \n    }\n\n    @Override\n    public void move() {\n        System.out.println(this.name + "在床上爬！");\n    }\n}\npublic class Dog extends Animal {\n    public Dog(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void move() {\n        System.out.println(this.name + "在路上跑");\n    }\n    \n    public void likeFood(){\n        System.out.println(this.name+"爱吃骨头");\n    }\n}\npublic class Test {\n    public static void main(String[] args) {\n        //向上转型\n        Animal d=new Dog("小花狗");\n        d.move();//小花狗在路上跑\n\n        //向下转型\n        Animal d1=new Dog("小狗狗");\n        if(d1 instanceof Dog){//判断对象类型\n            Dog dx=(Dog) d1;\n            dx.likeFood();\n        }\n    }\n}\n')])])])])]),t._v(" "),s("h5",{attrs:{id:"多态应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态应用"}},[t._v("#")]),t._v(" 多态应用")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eats")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eats")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eats")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//面向父类型编程，面向更加抽象进行编程，不建议面向具体编程。面向具体编程会让软件的拓展力很差")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//public void eats(Dog a){")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    a.eat();")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//public void eats(Cat a){")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    a.eat();")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"狗正在吃骨头"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"猫正在吃鱼"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("静态方法不谈覆盖 static")])]),t._v(" "),s("li",[s("p",[t._v("私有方法不能覆盖 private")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("多态在开发中的作用是")]),t._v("：\n降低程序的耦合度，提高程序的扩展力。")]),t._v(" "),s("p",[t._v("public class Master{\npublic void feed(Dog d){}\npublic void feed(Cat c){}\n}\n以上的代码中表示：Master和Dog以及Cat的关系很紧密（耦合度高）。导致扩展力很差。")]),t._v(" "),s("p",[t._v("public class Master{\npublic void feed(Pet pet){\npet.eat();\n}\n}\n以上的代表中表示：Master和Dog以及Cat的关系就脱离了，Master关注的是Pet类。\n这样Master和Dog以及Cat的耦合度就降低了，提高了软件的扩展性。")])])]),t._v(" "),s("h5",{attrs:{id:"super"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#super"}},[t._v("#")]),t._v(" Super")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("super能出现在实例方法和构造方法中。")]),t._v(" "),s("ul",[s("li",[t._v("super的语法是：“super.”、“super()”")]),t._v(" "),s("li",[t._v("super不能使用在静态方法中。")]),t._v(" "),s("li",[t._v("super. 大部分情况下是可以省略的。super.什么时候不能省略呢？\n"),s("ul",[s("li",[t._v("父类和子类中有同名属性，或者说有同样的方法，")]),t._v(" "),s("li",[t._v("想在子类中访问父类的，super. 不能省略。")])])]),t._v(" "),s("li",[t._v("super() 只能出现在构造方法第一行，通过当前的构造方法去调用“父类”中\n的构造方法，目的是：创建子类对象的时候，先初始化父类型特征。")]),t._v(" "),s("li",[t._v("super的使用：\nsuper.属性名\t\t\t\t【访问父类的属性】\nsuper.方法名(实参)\t\t【访问父类的方法】\nsuper(实参)\t\t\t\t\t【调用父类的构造方法】")])])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('// 示例代码\npublic class test02 {\n    public static void main(String []args){\n        Stu s=new Stu("张三",12,202101,"学生卡");\n        System.out.println(s.getName()+"，拥有："+s.getType()+"，卡号："+s.getCid());\n\n        Tea t=new Tea("梁老师",12,202101,"老师卡");\n        System.out.println(t.getName()+"，拥有："+t.getType()+"，卡号："+t.getCid());\n    }\n}\nclass Card{\n    private int cid;\n    private String type;\n\n    public Card(){\n        System.out.println("Card");\n    }\n    public Card(String type,int cid){\n        this.type=type;\n        this.cid=cid;\n    }\n\n    public int getCid() {\n        return cid;\n    }\n\n    public void setCid(int cid) {\n        this.cid = cid;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n}\nclass Stu extends Card{\n    private String name;\n    private int age;\n    public Stu(){\n\n    }\n    public Stu(String name,int age,int cid,String type){\n        super(type,cid);\n        this.name=name;\n        this.age=age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\nclass Tea extends Card{\n    private String name;\n    private int age;\n    public Tea(){\n\n    }\n    public Tea(String name,int age,int cid,String type){\n        //super(type,cid);\n        this.name=name;\n        this.age=age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n')])])])])]),t._v(" "),s("h5",{attrs:{id:"final"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#final"}},[t._v("#")]),t._v(" final")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("final是Java语言中的一个关键字")])]),t._v(" "),s("li",[s("p",[t._v("final表示最终的，不可变的，只能赋一次值")])]),t._v(" "),s("li",[s("p",[t._v("final可以修饰变量、方法、类等")])]),t._v(" "),s("li",[s("p",[t._v("final修饰的方法无法覆盖和重写")])]),t._v(" "),s("li",[s("p",[t._v("final修饰的类无法继承")])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20211003205329800.png",alt:"image-20211003205329800"}})])]),t._v(" "),s("li",[s("p",[t._v("final修饰的实例变量，系统不负责赋默认值，必须手动赋值。在"),s("strong",[t._v("构造方法中赋值")]),t._v("或者在"),s("strong",[t._v("变量后面赋")]),t._v("值。")])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class Tc {\n    public static void main(String[] args) {\n        BAB b = new BAB("张三");\n        BAB V = new BAB("三");\n    }\n}\n\nclass BAB {\n    final private String name;\n    final private int age = 18;\n\n    public BAB(String name) {\n        this.name = name;//必须在构造方法中\n    }\n\n    public void setName(String name) {\n//        this.name=name;在此赋值报错\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n')])])])])]),t._v(" "),s("h5",{attrs:{id:"抽象类-abstract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象类-abstract"}},[t._v("#")]),t._v(" 抽象类（abstract）")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("抽象类定义")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("abstract class AbsTest{ }\n")])])])])])]),t._v(" "),s("li",[s("p",[t._v("抽象类：无法实例化、无法创建对象，抽象类是用来被子类继承的")])]),t._v(" "),s("li",[s("p",[t._v("final和abstract不能联合使用，这两个关键字是对立的。final修饰的类无法继承")])]),t._v(" "),s("li",[s("p",[t._v("抽象类的子类可以是抽象类，也可以是非抽象类")])]),t._v(" "),s("li",[s("p",[t._v("抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法供子类使用的")])]),t._v(" "),s("li",[s("p",[t._v("抽象类中不一定有抽象方法，抽象方法必须在抽象类中")])]),t._v(" "),s("li",[s("p",[t._v("抽象方法定义")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("public abstract void dosome();\n")])])])])])]),t._v(" "),s("li",[s("p",[t._v("一个非抽象类继承抽象类，必须将抽象类中的抽象方法进行覆盖、重写、实现")])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("abstract class AbsTest {\n    public abstract void dosome();\n}\n\nclass Test extends AbsTest {\n    @Override\n    public void dosome() {\n    }\n}\n")])])])])]),t._v(" "),s("h5",{attrs:{id:"接口-interface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口-interface"}},[t._v("#")]),t._v(" 接口（interface ）")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("接口时一种“引用数据类型”")])]),t._v(" "),s("li",[s("p",[t._v("接口时完全抽象的")])]),t._v(" "),s("li",[s("p",[t._v("接口的定义")]),t._v(" "),s("ul",[s("li",[t._v("[修饰符列表] interface 接口名{}")])])]),t._v(" "),s("li",[s("p",[t._v("接口支持多继承")])]),t._v(" "),s("li",[s("p",[t._v("接口中只有常量+抽象方法")])]),t._v(" "),s("li",[s("p",[t._v("接口中所有的元素都是public修饰的")])]),t._v(" "),s("li",[s("p",[t._v("接口中抽象方法的public abstract可以省略")])]),t._v(" "),s("li",[s("p",[t._v("接口中常量的public static final可以省略")])]),t._v(" "),s("li",[s("p",[t._v("接口中方法不能有方法体")])]),t._v(" "),s("li",[s("p",[t._v("一个非抽象的类，实现接口的时候，必须将接口中所有方法加以实现")])]),t._v(" "),s("li",[s("p",[t._v("一个类可以实现多个接口")])]),t._v(" "),s("li",[s("p",[t._v("extends和implements可以共存，extends在前，implements在后")])]),t._v(" "),s("li",[s("p",[t._v("使用接口，写代码的时候，可以使用多态（父类型引用指向子类型对象）")])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("public class Test01 {\n    public static void main(String[] args) {\n        A e = new E();\n        double pi = e.PI;\n        System.out.println(pi);//3.1415926\n    }\n}\n\ninterface A {\n    double PI = 3.1415926;\n\n    void doSome();\n}\n\ninterface B {\n    void doEat();\n}\n\ninterface C {\n}\n\ninterface D extends A, B, C {\n}\n\ninterface F {\n    void doFly();\n}\n\nclass E extends G implements D,F {\n\n    @Override\n    public void doSome() {\n\n    }\n\n    @Override\n    public void doEat() {\n\n    }\n\n    @Override\n    public void doFly() {\n\n    }\n}\nclass G{\n    \n}\n")])])])])]),t._v(" "),s("h5",{attrs:{id:"接口在开发中的作业"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口在开发中的作业"}},[t._v("#")]),t._v(" 接口在开发中的作业")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("注意：接口在开发中的作用，类似于多态在开发中的作用。")])]),t._v(" "),s("li",[s("p",[t._v("多态：面向抽象编程，不要面向具体编程。降低程序的耦合度。提高程序的扩展力。")])]),t._v(" "),s("li",[s("p",[t._v("三个字“解耦合”")]),t._v(" "),s("ul",[s("li",[t._v("面向接口编程，可以降低程序的耦合度，提高程序的扩展力。符合OCP开发原则。")]),t._v(" "),s("li",[t._v("接口的使用离不开多态机制。（接口+多态才可以达到降低耦合度。）")]),t._v(" "),s("li",[t._v("接口可以解耦合，解开的是谁和谁的耦合！！！\n任何一个接口都有调用者和实现者。\n接口可以将调用者和实现者解耦合。\n调用者面向接口调用。\n实现者面向接口编写实现。")])])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class Test02 {\n    public static void main(String[] args) {\n        FoodMenu c = new WesternChef();   //实例化厨师\n        User u = new User();              //实例化用户\n        u.setFoodMenu(c);               //给用户菜单\n        u.order();                      //用户已经点好餐\n    }\n}\n\n//菜单接口\ninterface FoodMenu {\n    void YuxiangPork();\n\n    void ScrambledEggs();\n}\n\n//厨师实现炒菜接口\nclass ChinaChef implements FoodMenu {\n\n    @Override\n    public void YuxiangPork() {\n        System.out.println("中国厨师做的鱼香肉丝");\n    }\n\n    @Override\n    public void ScrambledEggs() {\n        System.out.println("中国厨师做的西红柿草鸡蛋");\n    }\n}\n\nclass WesternChef implements FoodMenu {\n    @Override\n    public void YuxiangPork() {\n        System.out.println("西餐厨师做的鱼香肉丝");\n    }\n\n    @Override\n    public void ScrambledEggs() {\n        System.out.println("西餐厨师做的西红柿炒鸡蛋");\n    }\n}\n\n//用户点菜\nclass User {\n    private FoodMenu foodMenu;\n\n    public User() {\n    }\n\n    public User(FoodMenu foodMenu) {\n        this.foodMenu = foodMenu;\n    }\n\n    public FoodMenu getFoodMenu() {\n        return foodMenu;\n    }\n\n    public void setFoodMenu(FoodMenu foodMenu) {\n        this.foodMenu = foodMenu;\n    }\n\n    //用户点餐\n    public void order() {\n        //用户点了两个菜\n        this.foodMenu.YuxiangPork();\n        this.foodMenu.ScrambledEggs();\n    }\n}\n')])])])])]),t._v(" "),s("h5",{attrs:{id:"类型和类型之间的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型和类型之间的关系"}},[t._v("#")]),t._v(" 类型和类型之间的关系")]),t._v(" "),s("ul",[s("li",[t._v("is a（继承）、has a（关联）、like a（实现）")]),t._v(" "),s("li",[t._v("is a：\n"),s("ul",[s("li",[t._v("Cat is a Animal（猫是一个动物）")]),t._v(" "),s("li",[t._v("凡是能够满足is a的表示“继承关系”")]),t._v(" "),s("li",[t._v("A extends B")])])]),t._v(" "),s("li",[t._v("has a：\n"),s("ul",[s("li",[t._v("I has a Pen（我有一支笔）")]),t._v(" "),s("li",[t._v("凡是能够满足has a关系的表示“关联关系”")]),t._v(" "),s("li",[t._v("关联关系通常以“属性”的形式存在。")]),t._v(" "),s("li",[t._v("A{  B b;  }")])])]),t._v(" "),s("li",[t._v("like a:\n"),s("ul",[s("li",[t._v("Cooker like a FoodMenu（厨师像一个菜单一样）")]),t._v(" "),s("li",[t._v("凡是能够满足like a关系的表示“实现关系”")]),t._v(" "),s("li",[t._v("实现关系通常是：类实现接口。")]),t._v(" "),s("li",[t._v("A implements B")])])])]),t._v(" "),s("h5",{attrs:{id:"抽象类和接口有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象类和接口有什么区别"}},[t._v("#")]),t._v(" 抽象类和接口有什么区别")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("在这里我们只说一下抽象类和接口在语法上的区别。\n至于以后抽象类和接口应该怎么进行选择，通过后面的项目去体会/学习。\n\t\n抽象类是半抽象的。\n接口是完全抽象的。\n\n抽象类中有构造方法。\n接口中没有构造方法。\n\n接口和接口之间支持多继承。\n类和类之间只能单继承。\n\n一个类可以同时实现多个接口。\n一个抽象类只能继承一个类（单继承）。\n\n接口中只允许出现常量和抽象方法。\n\n这里先透露一个信息：\n\t以后接口使用的比抽象类多。一般抽象类使用的还是少。\n\t接口一般都是对“行为”的抽象。\n")])])])])]),t._v(" "),s("h5",{attrs:{id:"package和import"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#package和import"}},[t._v("#")]),t._v(" package和import")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("package")]),t._v(" "),s("ul",[s("li",[t._v("第一：package出现在java源文件第一行。")]),t._v(" "),s("li",[t._v("第二：带有包名怎么编译？javac -d . xxx.java")]),t._v(" "),s("li",[t._v("第三：怎么运行？java 完整类名")]),t._v(" "),s("li",[t._v("补充：以后说类名的时候，如果带着包名描述，表示完整类名。如果没有带包，描述的话，表示简类名。\n"),s("ul",[s("li",[t._v("java.util.Scanner 完整类名。")]),t._v(" "),s("li",[t._v("Scanner 简类名")])])])])]),t._v(" "),s("li",[s("p",[t._v("import")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("import什么时候不需要？")]),t._v(" "),s("ul",[s("li",[t._v("java.lang不需要。")]),t._v(" "),s("li",[t._v("同包下不需要。")]),t._v(" "),s("li",[t._v("其它一律都需要。")])])]),t._v(" "),s("li",[s("p",[t._v("怎么用？")]),t._v(" "),s("ul",[s("li",[t._v("import 完整类名;")]),t._v(" "),s("li",[t._v("import 包名.*;")]),t._v(" "),s("li",[t._v("import java.util.Scanner; // 完整类名。")])])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\t// 同学的疑问：这样是不是效率比较低。\n\t// 这个效率不低，因为编译器在编译的时候，会自动把*变成具体的类名。\n\timport java.util.*;\n\n\t// 想省懒劲你不能太省了。\n\timport java.*; 这是不允许的，因为在java语言中规定，这里的*只代表某些类的名字。\n")])])])])])])]),t._v(" "),s("h5",{attrs:{id:"访问控制权限"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问控制权限"}},[t._v("#")]),t._v(" 访问控制权限")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("private 表示私有的，只能在本类中访问")])]),t._v(" "),s("li",[s("p",[t._v("public 表示公开的，在任何位置都可以访问")])]),t._v(" "),s("li",[s("p",[t._v("“默认”表示只能在本类，以及同包下访问。")])]),t._v(" "),s("li",[s("p",[t._v("protected表示只能在本类、同包、子类中访问。")])]),t._v(" "),s("li",[s("table",[s("thead",[s("tr",[s("th",[t._v("访问控制修饰符")]),t._v(" "),s("th",[t._v("本类")]),t._v(" "),s("th",[t._v("同包")]),t._v(" "),s("th",[t._v("子类")]),t._v(" "),s("th",[t._v("任意位置")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("public")]),t._v(" "),s("td",[t._v("可以")]),t._v(" "),s("td",[t._v("可以")]),t._v(" "),s("td",[t._v("可以")]),t._v(" "),s("td",[t._v("可以")])]),t._v(" "),s("tr",[s("td",[t._v("protected")]),t._v(" "),s("td",[t._v("可以")]),t._v(" "),s("td",[t._v("可以")]),t._v(" "),s("td",[t._v("可以")]),t._v(" "),s("td",[t._v("访问不到")])]),t._v(" "),s("tr",[s("td",[t._v("默认")]),t._v(" "),s("td",[t._v("可以")]),t._v(" "),s("td",[t._v("可以")]),t._v(" "),s("td",[t._v("访问不到")]),t._v(" "),s("td",[t._v("访问不到")])]),t._v(" "),s("tr",[s("td",[t._v("private")]),t._v(" "),s("td",[t._v("可以")]),t._v(" "),s("td",[t._v("访问不到")]),t._v(" "),s("td",[t._v("访问不到")]),t._v(" "),s("td",[t._v("访问不到")])])])]),t._v(" "),s("p",[t._v("范围从大到小排序：public > protected > 默认 > private")])]),t._v(" "),s("li",[s("p",[t._v("访问控制符用在方法中")]),t._v(" "),s("ul",[s("li",[t._v("属性（4个都能用）")]),t._v(" "),s("li",[t._v("方法（4个都能用）")]),t._v(" "),s("li",[t._v("类（public和默认能用，其它不行。）")]),t._v(" "),s("li",[t._v("接口（public和默认能用，其它不行。）")])])])]),t._v(" "),s("h5",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("数组是引用数据类型，所以数组对象是存储堆内存当中。")])]),t._v(" "),s("li",[s("p",[t._v("数组一旦创建长度不可变")])]),t._v(" "),s("li",[s("p",[t._v("数组中元素要求类型统一")])]),t._v(" "),s("li",[s("p",[t._v("数组中的元素存储地址是连续的，内存地址连续，数组存储元素的特点")])]),t._v(" "),s("li",[s("p",[t._v("数组的优缺点")]),t._v(" "),s("ul",[s("li",[t._v("第一：空间存储上，内存地址是连续的。")]),t._v(" "),s("li",[t._v("第二：每个元素占用的空间大小相同。")]),t._v(" "),s("li",[t._v("第三：知道首元素的内存地址。")]),t._v(" "),s("li",[t._v("第四：通过下标可以计算出偏移量。")]),t._v(" "),s("li",[t._v("通过一个数学表达式，就可以快速计算出某个下标位置上元素的内存地址，直接通过内存地址定位，效率非常高")]),t._v(" "),s("li",[t._v("优点：检索效率高")]),t._v(" "),s("li",[t._v("缺点：随机增删效率较低，数组无法存储大数据量")]),t._v(" "),s("li",[t._v("注意：数组最后一个元素的增删效率不受影响")])])]),t._v(" "),s("li",[s("p",[t._v("一维数组的静态初始化和动态初始化")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("静态初始化：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("int[] arr = {1,2,3,4};\nObject[] objs = {new Object(), new Object(), new Object()};\n")])])])]),t._v(" "),s("li",[s("p",[t._v("动态初始化：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("int[] arr = new int[4]; // 4个长度，每个元素默认值0\nObject[] objs = new Object[4]; // 4个长度，每个元素默认值null\n")])])])])])])]),t._v(" "),s("h5",{attrs:{id:"冒泡排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("冒泡排序算法\n    1、每一次循环结束之后，都要找出最大的数据，放到参与比较的这堆数据的最右边。（冒出最大的那个气泡。）\n    2、核心：\n        拿着左边的数字和右边的数字比对，当左边 > 右边的时候，交换位置。\n原始数据：\n3, 2, 7, 6, 8\n第1次循环：(最大的跑到最右边。)\n2, 3, 7, 6, 8 （3和2比较，2 < 3，所以2和3交换位置）\n2, 3, 7, 6, 8 （虽然不需要交换位置：但是3和7还是需要比较一次。）\n2, 3, 6, 7, 8 （7和6交换位置）\n2, 3, 6, 7, 8 （虽然不需要交换位置：但是3和7还是需要比较一次。）\n\n经过第1次循环，此时剩下参与比较的数据：2, 3, 6, 7\n第2次循环：\n2, 3, 6, 7 (2和3比较，不需要交换位置)\n2, 3, 6, 7 （3和6比较，不需要交换位置）\n2, 3, 6, 7 (6和7比较，不需要交换位置)\n\n经过第2次循环，此时剩下参与比较的数据：2, 3, 6\n第3次循环：\n2, 3, 6 (2和3比较，不需要交换位置)\n2, 3, 6 （3和6比较，不需要交换位置）\n\n经过第3次循环，此时剩下参与比较的数据：2, 3\n第4次循环：\n2, 3 (2和3比较，不需要交换位置)\n")])])])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("for (int i = 0; i < arr.length - 1; i++) {\n    int m = i;\n    for (int j = i + 1; j < arr.length; j++) {\n        if (arr[m] > arr[j]) {\n            m = j;\n        }\n    }\n    if (m != i) {\n        int temp = arr[m];\n        arr[m] = arr[i];\n        arr[i] = temp;\n    }\n}\n")])])])])]),t._v(" "),s("h5",{attrs:{id:"选择排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选择排序"}},[t._v("#")]),t._v(" 选择排序")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("挑出小的，往前排序，减少交换次数")])]),t._v(" "),s("li",[s("p",[t._v("选择排序比冒泡排序好在：每一次的交换位置都是有意义的")])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("for (int i = 0; i < arr.length; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] > arr[j]) {\n                    int temp = arr[j];\n                    arr[j] = arr[i];\n                    arr[i] = temp;\n                }\n            }\n        }\n")])])])])]),t._v(" "),s("h5",{attrs:{id:"二分查找"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二分查找"}},[t._v("#")]),t._v(" 二分查找")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("二分法查找算法是基于排序的基础之上。（"),s("strong",[t._v("没有排序的数据是无法查找的")]),t._v("。）")])]),t._v(" "),s("li",[s("p",[t._v("二分法查找的终止条件：一直折半，直到中间的那个元素恰好是被查找的元素")])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public static void main(String[] args) {\n    int[] arr = {3, 5, 7, 9, 12, 56, 78};\n    int index = FindIndex(arr, 56);\n    System.out.println("找到：" + index);\n}\n\nprivate static int FindIndex(int[] arr, int i) {\n    if (arr.length == 0) return -1;\n    int begin = 0;\n    int end = arr.length - 1;\n    while (begin <= end) {\n        int midst = (begin + end) / 2;//求出中位数\n        if (arr[midst] == i) {//判断是否等于要查询的数并返回\n            return midst;\n        } else if (arr[midst] > i) {\n            //在左侧,已知开始的索引值\n            end = midst - 1;\n            for (int j = begin; j < end; j++) {\n                if (arr[j] == i) return j;\n            }\n        } else if (arr[midst] < i) {\n            //在左侧,已知结束的索引值\n            begin = midst + 1;\n            for (int j = begin; j < end; j++) {\n                if (arr[j] == i) return j;\n            }\n        }\n    }\n    return -1;\n}\n')])])])])]),t._v(" "),s("h5",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对String在内存存储方面的理解：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("字符串一旦创建不可变。")])]),t._v(" "),s("li",[s("p",[t._v("双引号括起来的字符串存储在字符串常量池中。")])]),t._v(" "),s("li",[s("p",[t._v("字符串的比较必须使用equals方法。")])]),t._v(" "),s("li",[s("p",[t._v("String已经重写了toString()和equals()方法。")])]),t._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('    String st=new String("hello");\n    String st1=new String("hello");\n    //以上共创建了三对象:两个堆方法区的String对象,方法区字符串常量池一个\n    System.out.println(st==st1);//false\n    System.out.println(st.equals(st1));//true\n    String st2="hello1";\n    String st3="hello1";\n    System.out.println(st2==st3);//true\n')])])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://iskr.gitee.io/pic/image-20211013223819275.png",alt:"image-20211013223819275"}})]),t._v(" "),s("ul",[s("li",[s("p",[t._v("常用API")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('// String类当中常用方法。\n//1（掌握）.char charAt(int index)\nchar c = "中国人".charAt(1); // "中国人"是一个字符串String对象。只要是对象就能“点.”\nSystem.out.println(c); // 国\n\n// 2（了解）.int compareTo(String anotherString)\n// 字符串之间比较大小不能直接使用 > < ，需要使用compareTo方法。\nint result = "abc".compareTo("abc");\nSystem.out.println(result); //0（等于0） 前后一致  10 - 10 = 0\n\nint result2 = "abcd".compareTo("abce");\nSystem.out.println(result2); //-1（小于0） 前小后大 8 - 9 = -1\n\nint result3 = "abce".compareTo("abcd");\nSystem.out.println(result3); // 1（大于0） 前大后小 9 - 8 = 1\n\n// 拿着字符串第一个字母和后面字符串的第一个字母比较。能分胜负就不再比较了。\nSystem.out.println("xyz".compareTo("yxz")); // -1\n\n// 3（掌握）.boolean contains(CharSequence s)\n// 判断前面的字符串中是否包含后面的子字符串。\nSystem.out.println("HelloWorld.java".contains(".java")); // true\nSystem.out.println("http://www.baidu.com".contains("https://")); // false\n\n// 4（掌握）. boolean endsWith(String suffix)\n// 判断当前字符串是否以某个子字符串结尾。\nSystem.out.println("test.txt".endsWith(".java")); // false\nSystem.out.println("test.txt".endsWith(".txt")); // true\nSystem.out.println("fdsajklfhdkjlsahfjkdsahjklfdss".endsWith("ss")); // true\n\n// 5（掌握）.boolean equals(Object anObject)\n// 比较两个字符串必须使用equals方法，不能使用“==”\n// equals方法有没有调用compareTo方法？ 老版本可以看一下。JDK13中并没有调用compareTo()方法。\n// equals只能看出相等不相等。\n// compareTo方法可以看出是否相等，并且同时还可以看出谁大谁小。\nSystem.out.println("abc".equals("abc")); // true\n\n// 6（掌握）.boolean equalsIgnoreCase(String anotherString)\n// 判断两个字符串是否相等，并且同时忽略大小写。\nSystem.out.println("ABc".equalsIgnoreCase("abC")); // true\n\n// 7（掌握）.byte[] getBytes()\n// 将字符串对象转换成字节数组\nbyte[] bytes = "abcdef".getBytes();\nfor(int i = 0; i < bytes.length; i++){\n    System.out.println(bytes[i]);\n}\n\n// 8（掌握）.int indexOf(String str)\n// 判断某个子字符串在当前字符串中第一次出现处的索引（下标）。\nSystem.out.println("oraclejavac++.netc#phppythonjavaoraclec++".indexOf("java")); // 6\n\n// 9（掌握）.boolean isEmpty()\n// 判断某个字符串是否为“空字符串”。底层源代码调用的应该是字符串的length()方法。\n//String s = "";\nString s = "a";\nSystem.out.println(s.isEmpty());\n\n// 10（掌握）. int length()\n// 面试题：判断数组长度和判断字符串长度不一样\n// 判断数组长度是length属性，判断字符串长度是length()方法。\nSystem.out.println("abc".length()); // 3\n\nSystem.out.println("".length()); // 0\n\n// 11（掌握）.int lastIndexOf(String str)\n// 判断某个子字符串在当前字符串中最后一次出现的索引（下标）\nSystem.out.println("oraclejavac++javac#phpjavapython".lastIndexOf("java")); //22\n\n// 12（掌握）. String replace(CharSequence target, CharSequence replacement)\n// 替换。\n// String的父接口就是：CharSequence\nString newString = "http://www.baidu.com".replace("http://", "https://");\nSystem.out.println(newString); //https://www.baidu.com\n// 把以下字符串中的“=”替换成“:”\nString newString2 = "name=zhangsan&password=123&age=20".replace("=", ":");\nSystem.out.println(newString2); //name:zhangsan&password:123&age:20\n\n// 13（掌握）.String[] split(String regex)\n// 拆分字符串\nString[] ymd = "1980-10-11".split("-"); //"1980-10-11"以"-"分隔符进行拆分。\nfor(int i = 0; i < ymd.length; i++){\n    System.out.println(ymd[i]);\n}\nString param = "name=zhangsan&password=123&age=20";\nString[] params = param.split("&");\nfor(int i = 0; i <params.length; i++){\n    System.out.println(params[i]);\n    // 可以继续向下拆分，可以通过“=”拆分。\n}\n\n// 14（掌握）、boolean startsWith(String prefix)\n// 判断某个字符串是否以某个子字符串开始。\nSystem.out.println("http://www.baidu.com".startsWith("http")); // true\nSystem.out.println("http://www.baidu.com".startsWith("https")); // false\n\n// 15（掌握）、 String substring(int beginIndex) 参数是起始下标。\n// 截取字符串\nSystem.out.println("http://www.baidu.com".substring(7)); //www.baidu.com\n\n// 16（掌握）、String substring(int beginIndex, int endIndex)\n// beginIndex起始位置（包括）\n// endIndex结束位置（不包括）\nSystem.out.println("http://www.baidu.com".substring(7, 10)); //www\n\n// 17(掌握)、char[] toCharArray()\n// 将字符串转换成char数组\nchar[] chars = "我是中国人".toCharArray();\nfor(int i = 0; i < chars.length; i++){\n    System.out.println(chars[i]);\n}\n\n// 18（掌握）、String toLowerCase()\n// 转换为小写。\nSystem.out.println("ABCDefKXyz".toLowerCase());\n\n// 19（掌握）、String toUpperCase();\nSystem.out.println("ABCDefKXyz".toUpperCase());\n\n// 20（掌握）. String trim();\n// 去除字符串前后空白\nSystem.out.println("           hello      world             ".trim());\n\n// 21（掌握）. String中只有一个方法是静态的，不需要new对象\n// 这个方法叫做valueOf\n// 作用：将“非字符串”转换成“字符串”\n//String s1 = String.valueOf(true);\n//String s1 = String.valueOf(100);\n//String s1 = String.valueOf(3.14);\n\n// 这个静态的valueOf()方法，参数是一个对象的时候，会自动调用该对象的toString()方法吗？\nString s1 = String.valueOf(new Customer());\n//System.out.println(s1); // 没有重写toString()方法之前是对象内存地址 com.bjpowernode.javase.string.Customer@10f87f48\nSystem.out.println(s1); //我是一个VIP客户！！！！\n/*\njava.lang.StringBuilder\nStringBuffer和StringBuilder的区别？\n    StringBuffer中的方法都有：synchronized关键字修饰。表示StringBuffer在多线程环境下运行是安全的。\n    StringBuilder中的方法都没有：synchronized关键字修饰，表示StringBuilder在多线程环境下运行是不安全的。\n\n    StringBuffer是线程安全的。\n    StringBuilder是非线程安全的。\n    \n */\npublic class StringBuilderTest01 {\n    public static void main(String[] args) {\n\n        // 使用StringBuilder也是可以完成字符串的拼接。\n        StringBuilder sb = new StringBuilder();\n        sb.append(100);\n        sb.append(true);\n        sb.append("hello");\n        sb.append("kitty");\n        System.out.println(sb);\n    }\n}\n')])])])])])])]),t._v(" "),s("h5",{attrs:{id:"八种包装数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八种包装数据类型"}},[t._v("#")]),t._v(" 八种包装数据类型")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Byte")])]),t._v(" "),s("li",[s("p",[t._v("Short")])]),t._v(" "),s("li",[s("p",[t._v("Integer")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\t\tInteger n=100;\n        Integer m=100;\n        System.out.println(n==m);//true  ==>因为Jvm中整数常量池中的数据127~-128\n        Integer n1=-100;\n        Integer m1=-100;\n        System.out.println(n1==m1);//true\n        Integer n3=128;\n        Integer m3=128;\n        System.out.println(n3==m3);//false\n        Integer n4=-129;\n        Integer m4=-129;\n        System.out.println(n4==m4);//false\n")])])])])])]),t._v(" "),s("li",[s("p",[t._v("Long")])]),t._v(" "),s("li",[s("p",[t._v("Float")])]),t._v(" "),s("li",[s("p",[t._v("Double")])]),t._v(" "),s("li",[s("p",[t._v("Boolean")])]),t._v(" "),s("li",[s("p",[t._v("Character")])]),t._v(" "),s("li",[s("p",[t._v("数字类")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("DecimalFormat数字格式化\n\t\t###,###.## 表示加入千分位，保留两个小数。\n\t\t###,###.0000 表示加入千分位，保留4个小数，不够补0\nBigDecimal\n\t\t财务软件中通常使用BigDecimal\n")])])])])])])]),t._v(" "),s("h5",{attrs:{id:"异常处理throws"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常处理throws"}},[t._v("#")]),t._v(" 异常处理throws")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1、什么是异常，java提供异常处理机制有什么用？\n    以下程序执行过程中发生了不正常的情况，而这种不正常的情况叫做：异常\n    java语言是很完善的语言，提供了异常的处理方式，以下程序执行过程中出现了不正常情况，\n    java把该异常信息打印输出到控制台，供程序员参考。程序员看到异常信息之后，可以对\n    程序进行修改，让程序更加的健壮。\n\n    什么是异常：程序执行过程中的不正常情况。\n    异常的作用：增强程序的健壮性。\n\n2、以下程序执行控制台出现了：\n    Exception in thread "main" java.lang.ArithmeticException: / by zero\n       at com.bjpowernode.javase.exception.ExceptionTest01.main(ExceptionTest01.java:14)\n   这个信息被我们称为：异常信息。这个信息是JVM打印的。\n')])])])]),t._v(" "),s("li",[s("p",[t._v("处理异常的方式")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('处理异常的第一种方式：\n    在方法声明的位置上使用throws关键字抛出，谁调用我这个方法，我就抛给谁。抛给调用者来处理。\n    这种处理异常的态度：上报。\n\n处理异常的第二种方式：\n    使用try..catch语句对异常进行捕捉。\n    这个异常不会上报，自己把这个事儿处理了。\n    异常抛到此处为止，不再上抛了。\n\n注意：\n    只要异常没有捕捉，采用上报的方式，此方法的后续代码不会执行。\n    另外需要注意，try语句块中的某一行出现异常，该行后面的代码不会执行。\n    try..catch捕捉异常之后，后续代码可以执行。\n\n在以后的开发中，处理编译时异常，应该上报还是捕捉呢，怎么选？\n    如果希望调用者来处理，选择throws上报。\n    其它情况使用捕捉的方式。\n */\npublic class ExceptionTest06 {\n    // 一般不建议在main方法上使用throws，因为这个异常如果真正的发生了，一定会抛给JVM。JVM只有终止。\n    // 异常处理机制的作用就是增强程序的健壮性。怎么能做到，异常发生了也不影响程序的执行。所以\n    // 一般main方法中的异常建议使用try..catch进行捕捉。main就不要继续上抛了。\n    /*\n    public static void main(String[] args) throws FileNotFoundException {\n        System.out.println("main begin");\n        m1();\n        System.out.println("main over");\n    }\n     */\n    public static void main(String[] args) {\n\n        // 100 / 0这是算术异常，这个异常是运行时异常，你在编译阶段，可以处理，也可以不处理。编译器不管。\n        //System.out.println(100 / 0); // 不处理编译器也不管\n        // 你处理也可以。\n        /*\n        try {\n            System.out.println(100 / 0);\n        } catch(ArithmeticException e){\n            System.out.println("算术异常了！！！！");\n        }\n         */\n\n        System.out.println("main begin");\n        try {\n            // try尝试\n            m1();\n            // 以上代码出现异常，直接进入catch语句块中执行。\n            System.out.println("hello world!");\n        } catch (FileNotFoundException e){ // catch后面的好像一个方法的形参。\n            // 这个分支中可以使用e引用，e引用保存的内存地址是那个new出来异常对象的内存地址。\n            // catch是捕捉异常之后走的分支。\n            // 在catch分支中干什么？处理异常。\n            System.out.println("文件不存在，可能路径错误，也可能该文件被删除了！");\n            System.out.println(e); //java.io.FileNotFoundException: D:\\course\\01-课\\学习方法.txt (系统找不到指定的路径。)\n        }\n\n        // try..catch把异常抓住之后，这里的代码会继续执行。\n        System.out.println("main over");\n    }\n\n    private static void m1() throws FileNotFoundException {\n        System.out.println("m1 begin");\n        m2();\n        // 以上代码出异常，这里是无法执行的。\n        System.out.println("m1 over");\n    }\n\n    // 抛别的不行，抛ClassCastException说明你还是没有对FileNotFoundException进行处理\n    //private static void m2() throws ClassCastException{\n    // 抛FileNotFoundException的父对象IOException，这样是可以的。因为IOException包括FileNotFoundException\n    //private static void m2() throws IOException {\n    // 这样也可以，因为Exception包括所有的异常。\n    //private static void m2() throws Exception{\n    // throws后面也可以写多个异常，可以使用逗号隔开。\n    //private static void m2() throws ClassCastException, FileNotFoundException{\n    private static void m2() throws FileNotFoundException {\n        System.out.println("m2 begin");\n        // 编译器报错原因是：m3()方法声明位置上有：throws FileNotFoundException\n        // 我们在这里调用m3()没有对异常进行预处理，所以编译报错。\n        // m3();\n\n        m3();\n        // 以上如果出现异常，这里是无法执行的！\n        System.out.println("m2 over");\n    }\n\n    private static void m3() throws FileNotFoundException {\n        // 调用SUN jdk中某个类的构造方法。\n        // 这个类还没有接触过，后期IO流的时候就知道了。\n        // 我们只是借助这个类学习一下异常处理机制。\n        // 创建一个输入流对象，该流指向一个文件。\n        /*\n        编译报错的原因是什么？\n            第一：这里调用了一个构造方法：FileInputStream(String name)\n            第二：这个构造方法的声明位置上有：throws FileNotFoundException\n            第三：通过类的继承结构看到：FileNotFoundException父类是IOException，IOException的父类是Exception，\n            最终得知，FileNotFoundException是编译时异常。\n\n            错误原因？编译时异常要求程序员编写程序阶段必须对它进行处理，不处理编译器就报错。\n         */\n        //new FileInputStream("D:\\\\course\\\\01-开课\\\\学习方法.txt");\n\n        // 我们采用第一种处理方式：在方法声明的位置上使用throws继续上抛。\n        // 一个方法体当中的代码出现异常之后，如果上报的话，此方法结束。\n        new FileInputStream("D:\\\\course\\\\01-课\\\\学习方法.txt");\n\n        System.out.println("如果以上代码出异常，这里会执行吗??????????????????不会！！！");\n    }\n}\n')])])])])])]),t._v(" "),s("li",[s("p",[t._v("final finally finalize有什么区别？")]),t._v(" "),s("ul",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" final 关键字\n        final修饰的类无法继承\n        final修饰的方法无法覆盖\n        final修饰的变量不能重新赋值。\n  \n    finally 关键字\n        和try一起联合使用。\n        finally语句块中的代码是必须执行的。\n  \n    finalize 标识符\n        是一个Object类中的方法名。\n        这个方法是由垃圾回收器GC负责调用的。\n")])])])])])])]),t._v(" "),s("h5",{attrs:{id:"集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[t._v("#")]),t._v(" 集合")]),t._v(" "),s("ul",[s("li",[t._v("ArrayList：底层是数组")]),t._v(" "),s("li",[t._v("LinkedList：底层是双向链表")]),t._v(" "),s("li",[t._v("Vector：底层是数组，线程安全的，效率较低，使用较少")]),t._v(" "),s("li",[t._v("HashSet：底层是HashMap，放到HashSet集合中的元素等同于放到HashMap集合中Key部分")]),t._v(" "),s("li",[t._v("TreeSet：底层是TreeMap，放到TreeSet集合中的元素等同于放到TreeMap集合中key部分")]),t._v(" "),s("li",[t._v("HashMap：底层是哈希表")]),t._v(" "),s("li",[t._v("Hashtable：底层是哈希表，线程安全的，效率较低使用较少")]),t._v(" "),s("li",[t._v("Properties：底层是哈希表，线程安全的，key和value只能存储字符串String")]),t._v(" "),s("li",[t._v("TreeMap：底层是二叉树。TreeMap集合中的key可以自动按照大小顺序排序")]),t._v(" "),s("li",[t._v("List集合存储元素特点：\n"),s("ul",[s("li",[t._v("有序可重复")]),t._v(" "),s("li",[t._v("有序：存进去和取出来的顺序相同，每个元素都是有下标的")]),t._v(" "),s("li",[t._v("可以重复：存进去")])])]),t._v(" "),s("li",[t._v("Set（Map）集合存储元素特点：\n"),s("ul",[s("li",[t._v("无序不可以重复")]),t._v(" "),s("li",[t._v("无序：存进去和取出来的顺序不一定相同，另外Set集合中元素没有下标")]),t._v(" "),s("li",[t._v("不可重复：存进去1，就不能再存进去1了")])])]),t._v(" "),s("li",[t._v("SortedSet（SortedMap）集合存储元素特点：\n"),s("ul",[s("li",[t._v("首先是无序不可重复的，但是SortedSet集合中的元素是可排序的")]),t._v(" "),s("li",[t._v("无序：存进去和取出来的下标不一定相同，另外Set集合没有元素下标")]),t._v(" "),s("li",[t._v("不可重复：就不能存入相同的值")]),t._v(" "),s("li",[t._v("可排序：可以按照大小顺序排序")])])]),t._v(" "),s("li",[t._v("Map集合中的Key，就是一个Set集合")]),t._v(" "),s("li",[t._v("在Set集合中放数据，实际上是放在了Map集合中的Key部分")])]),t._v(" "),s("h5",{attrs:{id:"collection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#collection"}},[t._v("#")]),t._v(" Collection")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('package Contains01;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.Objects;\n\npublic class Test01 {\n    public static void main(String[] args) {\n        Collection arr = new ArrayList();\n        arr.add(123);\n        arr.add(new String("123"));\n        arr.add("123");\n        System.out.println(arr.contains("123"));//true\n        arr.remove("123");\n        System.out.println(arr.size());//2\n\n        User u1 = new User("ZH");\n        User u2 = new User("ZH");\n        arr.add(u1);\n        System.out.println(arr.contains(u2));//在重写equals前为false,重写equals后为true\n        //contains比较的是内容不是内存地址。remove删除比较的是equals\n        System.out.println("============");\n        //创建迭代器迭代对象\n        Iterator iterator=arr.iterator();\n        while (iterator.hasNext()){\n            System.out.println(iterator.next());\n        }\n    }\n}\n\nclass User {\n    private String name;\n\n    public User() {\n\n    }\n\n    public User(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        User user = (User) o;\n        return Objects.equals(name, user.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name);\n    }\n}\n')])])]),s("h5",{attrs:{id:"常见报错"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见报错"}},[t._v("#")]),t._v(" 常见报错")]),t._v(" "),s("ul",[s("li",[t._v("空指针异常:"),s("code",[t._v("NullPointerException")])]),t._v(" "),s("li",[t._v("类型转换异常:"),s("code",[t._v("ClassCastException")])]),t._v(" "),s("li",[t._v("数组下标越界异常:"),s("code",[t._v("ArrayIndexOutOfBoundsException")])]),t._v(" "),s("li",[t._v("数字格式化异常:"),s("code",[t._v("NumberFormatException")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);